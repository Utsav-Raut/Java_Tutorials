An iterator is an object that implements either the Iterator or the ListIterator interface.
Iterator allows us to cycle through a collection, obtaining or removing elements.
ListIterator extends Iterator to allow bidirectional traversal of a list, and the modification of elements.

Iterator and ListIterator are generic interfaces which are declared as:
	interface Iterator<E>
	interface ListIterator<E>, where E specifies the type of objects being iterated.
	
Each of the collection classes provides an iterator() method that returns an iterator to the start of the collection.

To use an iterator to cycle through the contents of a collection, we follow the below steps:
	a) Obtain an iterator to the start of the collection by calling the collection's iterator() method
	b) Set up a loop that makes a call to hasNext(). Next the loop iterate as long as hasNext() returns true.
	c) Within the loop, obtain each element by calling next().
	
For collections that implement List, we can also obtain an iterator by calling the listIterator().
A list iterator gives us the ability to access the collection in either the forward or backward directions and lets us modify an element.