if we want to write a function which takes in a number and returns it's double value.

This is how we usually write:
public int returnDouble(int a){
	return a * 2 ;
}

Now converting this to a lambda expression:
doubleNumberFunction = public int returnDouble(int a){
	return a * 2;
}

doubleNumberFunction = int returnDouble(int a){
	return a *2;
}

doubleNumberFunction = int (int a){
	return a *2;
}

doubleNumberFunction = (int a) -> {
	return a*2;
}

doubleNumberFunction = (int a) -> return a*2;

doubleNumberFunction = (int a) -> a*2;


Another example:
addFunction = (int a, int b) -> a + b;

Another example:
safeDivideFunction = (int a, int b) -> {
	if(b==0) return 0;
	return a/b;
};

======================================================================

Starting from Java 8, an interface may contain method with implementations.
Functional interfaces are those which can have any number of methods with 
implementations but only one abstract method.
Functional interfaces can have only one abstract method and anything more than
that will throw an error.

To enforce that no one else if modifying a functional interface, we use:
@FunctionalInterface


======================================================================

Exercise:
Create a custom class Person and we create a list of the Person objects.
