Both TreeSet and TreeMap store elements in sorted order. However it is the comparator that defined precisely what "sorted order" means.
By defaults these classes store elements by using what Java refers to as the "natural ordering", which is usually the ordering that we expect (A before B, 1 before 2, etc).
If you want to order elements a different way, then specify a Comparator when you construct the set or map. Doing so gives the ability to govern precisely how elements are stored within sorted collections and maps.

Comparator is a generic interface that has this declaration:  interface Comparator<T>  where T specifies the type of objects being compared.
The Comparator interface defines two methods: compare() and equals().

The compare() method, compares two elements for order:
		int compare(T obj1, T obj2)
obj1 and obj2 are the objects to be compared. This method returns zero if the objects are equal. It returns a positive value if obj1 is greater than obj2. Otherwise a negative value is returned.
The method can throw a ClassCastException if the types of objects are not compatible for comparison.

By overriding compare(), you can alter the way that objects are ordered.


The equals() method tests whether an object equals the invoking comparator.
		boolean equals(Object obj)
Here obj is the object to be tested for equality. The method returns true if obj and the invoking object are both Comparator objects and use the same ordering.
Otherwise it returns false.
Overriding equals() is unnecessary, and most simple comparators will not do so.